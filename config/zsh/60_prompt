#! /bin/zsh

autoload colors && colors


setopt extended_glob
local lc=$'\e[' rc=m bold="01;" # Standard ANSI terminal escape values

typeset -Ag bright_colour fg_bright_bold
bright_colour=(
  black   90
  red     91
  green   92
  yellow  93
  blue    94
  magenta 95
  cyan    96
  white   97
)
fg_bright_bold=(
  black   "$lc$bold$bright_colour[black]$rc"
  red     "$lc$bold$bright_colour[red]$rc"
  green   "$lc$bold$bright_colour[green]$rc"
  yellow  "$lc$bold$bright_colour[yellow]$rc"
  blue    "$lc$bold$bright_colour[blue]$rc"
  magenta "$lc$bold$bright_colour[magenta]$rc"
  cyan    "$lc$bold$bright_colour[cyan]$rc"
  white   "$lc$bold$bright_colour[white]$rc"
)


ZSH_THEME_GIT_PROMPT_AHEAD="%{$reset_color%}%{$fg[green]%}â–²"
ZSH_THEME_GIT_PROMPT_BEHIND="%{$reset_color%}%{$fg_bright_bold[magenta]%}â–¼"
ZSH_THEME_GIT_PROMPT_ADDED="%{$reset_color%}%F{green}âœš"
ZSH_THEME_GIT_PROMPT_DIVERGED="%{$reset_color%}%{$fg_bright_bold[red]%}âœ—"
ZSH_THEME_GIT_PROMPT_STAGED="%{$reset_color%}%{$fg_bright_bold[green]%}âš‘"
ZSH_THEME_GIT_PROMPT_UNSTAGED="%{$reset_color%}%{$fg_bright_bold[yellow]%}âš‘"



#
# Will put into psvar git information
# 1: branch
# 2: status
# 3: State error level
# 4: state warning level
# 5: state ok level
#
#
function precmd {
    local git_dir branch extra _INDEX _STATUS

    psvar=()
    psvar[1]=""
    if type node > /dev/null; then
        psvar[2]="îœ˜$(node -v)"
    fi
    if test -d "$VIRTUAL_ENV"; then
        psvar[3]="îœ¼$(basename $VIRTUAL_ENV)"
    fi
    git_dir=$(git rev-parse --git-dir 2>/dev/null) || return
    extra=""
    if test -d "$git_dir/rebase-apply"; then
        if test -f "$git_dir/rebase-apply/rebasing"; then
            psvar[6]="rebase"
        elif test -f "$git_dir/rebase-apply/applying"; then
            psvar[6]="am"
        else
            psvar[6]="am/rebase"
        fi
        branch="$(git symbolic-ref HEAD 2>/dev/null)"
    elif test -f "$git_dir/rebase-merge/interactive"; then
        psvar[6]="rebase -i"
        branch="$(cat "$git_dir/rebase-merge/head-name")"
    elif test -d "$git_dir/rebase-merge"; then
        psvar[6]="rebase -m"
        branch="$(cat "$git_dir/rebase-merge/head-name")"
    elif test -f "$git_dir/MERGE_HEAD"; then
        psvar[6]="merge"
        branch="$(git symbolic-ref HEAD 2>/dev/null)"
    else
        branch="$(git symbolic-ref HEAD 2>/dev/null)" || \
            branch="$(git describe --exact-match HEAD 2>/dev/null)" || \
            branch="$(cut -c1-7 "$git_dir/HEAD")..."
        if test -f "$git_dir/BISECT_LOG"; then
            psvar[6]="bisect"
        else
            _INDEX=$(command git status --porcelain -b 2> /dev/null)
            if [[ -n "$_INDEX" ]]; then
                if $(echo "$_INDEX" | command grep -q '^[AMRD]. '); then
                    _STATUS="$_STATUS$ZSH_THEME_GIT_PROMPT_STAGED"
                fi
                if $(echo "$_INDEX" | command grep -q '^.[MTD] '); then
                    _STATUS="$_STATUS$ZSH_THEME_GIT_PROMPT_UNSTAGED"
                fi
                if $(echo "$_INDEX" | command grep -q -E '^\?\? '); then
                    _STATUS="$_STATUS$ZSH_THEME_GIT_PROMPT_UNTRACKED"
                fi
                if $(echo "$_INDEX" | command grep -q '^UU '); then
                    _STATUS="$_STATUS$ZSH_THEME_GIT_PROMPT_UNMERGED"
                fi
                if $(echo "$_INDEX" | command grep -q '^## .*ahead'); then
                    _STATUS="$_STATUS$ZSH_THEME_GIT_PROMPT_AHEAD"
                fi
                if $(echo "$_INDEX" | command grep -q '^## .*behind'); then
                    _STATUS="$_STATUS$ZSH_THEME_GIT_PROMPT_BEHIND"
                fi
                if $(echo "$_INDEX" | command grep -q '^## .*diverged'); then
                    _STATUS="$_STATUS$ZSH_THEME_GIT_PROMPT_DIVERGED"
                fi
            else
                _STATUS="$_STATUS$ZSH_THEME_GIT_PROMPT_CLEAN"
            fi
        fi
    fi


    psvar[4]="${branch#refs/heads/}"
    psvar[5]=$_STATUS
}


_my_prompt_setup() {
        setopt prompt_subst

    local rst  main  hour  user path cursor
    local -a pcc

    rst="%{$reset_color%}"
    main="%{$reset_color$fg_bright_bold[blue]%}"
    hour="%{$reset_color$fg_bright_bold[yellow]%}"
    path="%{$reset_color$fg_bright_bold[cyan]%}"
    gitpath="%{$reset_color$fg_bright_bold[red]%}"
    gitoperation="%{$reset_color$fg_bright_bold[red]%}"
    cursor="%{$reset_color$fg_bright_bold[red]%}"
    venv="%{$reset_color$fg_no_bold[yellow]%}"
    python="%{$reset_color$fg_bright_bold[yellow]%}"
    node="%{$reset_color$fg_bright_bold[green]%}"
    git="\$psvar[3]"
    PROMPT="\
$mainâ•­($hour%T$main)â”€%(4v.${gitpath}[%4v]%(6v.$gitoperation%6v.%(5v.$git .)).)$mainâ”€{$path%~$main}â”€â”€
$mainâ•°â”¤%{%(?..%S)%}%m%s$cursor â–¶$rst "
    RPROMPT="$venv %1v $node %2v $python %3v $rst"
    POSTEDIT=$reset_color
}

if [ $UID -eq 0 ]; then
    PROMPT="%{$reset_color$fg_bright_bold[yellow]%}[%{$fg_bright_bold[red]%}%{%(?..%S)%}%n %m %s%{$fg_bright_bold[yellow]%}î‚°%{$reset_color%} "
    RPROMPT="%{$reset_color$fg_bright_bold[yellow]%}(%{$fg_bright_bold[red]%}%~%{$fg_bright_bold[yellow]%})%{$reset_color%} "
    POSTEDIT=$reset_color
    export TERMINFO=/home/aurel/.local/kitty.app/lib/kitty/terminfo
else
    _my_prompt_setup
fi

case "$TERM" in
    xterm|rxvt-unicode)
        PROMPT="${PROMPT}%{]2;zsh%}"

        preexec () {
            local CMD=${1[(wr)^(*=*|sudo|exec|-*)]}
            echo -ne "\e]2;$CMD\007"
        }
    ;;
    *);;
esac
vim_ins_mode="%{$fg[white]%}î‚²%{$fg_bright_bold[blue]$bg[white]%} INSERT %{$reset_color%}"
vim_cmd_mode="%{$fg[green]%}î‚²%{$fg_bright_bold[black]$bg[green]%} COMMAND %{$reset_color%}"
vim_mode=$vim_ins_mode
function zle-line-init zle-keymap-select {
    if [[ ${KEYMAP} == vicmd ]] ||
         [[ $1 = 'block' ]]; then
          psvar[1]=$psvar[1]"--CMD--"

    elif [[ ${KEYMAP} == main ]] ||
           [[ ${KEYMAP} == viins ]] ||
           [[ ${KEYMAP} = '' ]] ||
           [[ $1 = 'beam' ]]; then
            psvar[1]=""
    fi

    echo -ne "\e[3 q"
    zle reset-prompt
}
zle -N zle-line-init
zle -N zle-keymap-select
